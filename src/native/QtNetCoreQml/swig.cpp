/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_QtNetCoreQml(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_QtNetCoreQml(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_QtNetCoreQml(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_QtNetCoreQml(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


#if defined(Q_OS_WIN)
typedef wchar_t TCHAR;
#define _WCHAR_MODE
#elif defined(Q_OS_LINUX)
typedef char16_t TCHAR;
#define _UTF16_MODE
#else
typedef char TCHAR;
#define _CHAR_MODE
#endif


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpQStringHelperCallback)(const TCHAR *);
static SWIG_CSharpQStringHelperCallback SWIG_csharp_qstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterQStringCallback_QtNetCoreQml(SWIG_CSharpQStringHelperCallback callback) {
    SWIG_csharp_qstring_callback = callback;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include <QDebug>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#include "net_instance.h"


#include "net_variant.h"


#include "net_type_info.h"


#include "net_type_info_method.h"


#include "net_type_info_property.h"


#include "net_type_info_manager.h"

SWIGINTERN std::vector< NetVariant * > *new_std_vector_Sl_NetVariant_Sm__Sg___SWIG_2(int capacity){
        std::vector< NetVariant * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< NetVariant * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN NetVariant *std_vector_Sl_NetVariant_Sm__Sg__getitemcopy(std::vector< NetVariant * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN NetVariant *const &std_vector_Sl_NetVariant_Sm__Sg__getitem(std::vector< NetVariant * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__setitem(std::vector< NetVariant * > *self,int index,NetVariant *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__AddRange(std::vector< NetVariant * > *self,std::vector< NetVariant * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< NetVariant * > *std_vector_Sl_NetVariant_Sm__Sg__GetRange(std::vector< NetVariant * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< NetVariant * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__Insert(std::vector< NetVariant * > *self,int index,NetVariant *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__InsertRange(std::vector< NetVariant * > *self,int index,std::vector< NetVariant * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__RemoveAt(std::vector< NetVariant * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__RemoveRange(std::vector< NetVariant * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< NetVariant * > *std_vector_Sl_NetVariant_Sm__Sg__Repeat(NetVariant *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< NetVariant * >(count, value);
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__Reverse__SWIG_0(std::vector< NetVariant * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__Reverse__SWIG_1(std::vector< NetVariant * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NetVariant_Sm__Sg__SetRange(std::vector< NetVariant * > *self,int index,std::vector< NetVariant * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_NetVariant_Sm__Sg__Contains(std::vector< NetVariant * > *self,NetVariant *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_NetVariant_Sm__Sg__IndexOf(std::vector< NetVariant * > *self,NetVariant *const &value){
        int index = -1;
        std::vector< NetVariant * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_NetVariant_Sm__Sg__LastIndexOf(std::vector< NetVariant * > *self,NetVariant *const &value){
        int index = -1;
        std::vector< NetVariant * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_NetVariant_Sm__Sg__Remove(std::vector< NetVariant * > *self,NetVariant *const &value){
        std::vector< NetVariant * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#include <QCoreApplication>


#include <QGuiApplication>
#include "qguiapplication_helpers.h"


#include <QQmlApplicationEngine>


#include "net_qml_register_type.h"


#include "net_qml_activate_signal.h"


#include "net_test_helper.h"


#include "net_test_string_interop.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swig.h"

SwigDirector_NetTypeInfoCallbacks::SwigDirector_NetTypeInfoCallbacks() : NetTypeInfoCallbacks(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_NetTypeInfoCallbacks::~SwigDirector_NetTypeInfoCallbacks() {
  
}


bool SwigDirector_NetTypeInfoCallbacks::isValidType(char *typeName) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  char * jtypeName = 0 ;
  
  if (!swig_callbackisValidType) {
    return NetTypeInfoCallbacks::isValidType(typeName);
  } else {
    jtypeName = SWIG_csharp_string_callback((const char *)typeName); 
    jresult = (unsigned int) swig_callbackisValidType(jtypeName);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_NetTypeInfoCallbacks::BuildTypeInfo(NetTypeInfo *typeInfo) {
  void * jtypeInfo = 0 ;
  
  if (!swig_callbackBuildTypeInfo) {
    NetTypeInfoCallbacks::BuildTypeInfo(typeInfo);
    return;
  } else {
    jtypeInfo = (void *) typeInfo; 
    swig_callbackBuildTypeInfo(jtypeInfo);
  }
}

void SwigDirector_NetTypeInfoCallbacks::CreateInstance(NetTypeInfo *typeInfo, NetGCHandle **instance) {
  void * jtypeInfo = 0 ;
  void ** jinstance = 0 ;
  
  if (!swig_callbackCreateInstance) {
    NetTypeInfoCallbacks::CreateInstance(typeInfo,instance);
    return;
  } else {
    jtypeInfo = (void *) typeInfo; 
    jinstance = (void **) instance;
    swig_callbackCreateInstance(jtypeInfo, jinstance);
  }
}

void SwigDirector_NetTypeInfoCallbacks::ReadProperty(NetPropertyInfo *propertyInfo, NetInstance *target, NetVariant *result) {
  void * jpropertyInfo = 0 ;
  void * jtarget = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackReadProperty) {
    NetTypeInfoCallbacks::ReadProperty(propertyInfo,target,result);
    return;
  } else {
    jpropertyInfo = (void *) propertyInfo; 
    jtarget = (void *) target; 
    jresult = (void *) result; 
    swig_callbackReadProperty(jpropertyInfo, jtarget, jresult);
  }
}

void SwigDirector_NetTypeInfoCallbacks::WriteProperty(NetPropertyInfo *propertyInfo, NetInstance *target, NetVariant *value) {
  void * jpropertyInfo = 0 ;
  void * jtarget = 0 ;
  void * jvalue = 0 ;
  
  if (!swig_callbackWriteProperty) {
    NetTypeInfoCallbacks::WriteProperty(propertyInfo,target,value);
    return;
  } else {
    jpropertyInfo = (void *) propertyInfo; 
    jtarget = (void *) target; 
    jvalue = (void *) value; 
    swig_callbackWriteProperty(jpropertyInfo, jtarget, jvalue);
  }
}

void SwigDirector_NetTypeInfoCallbacks::InvokeMethod(NetMethodInfo *methodInfo, NetInstance *target, std::vector< NetVariant * > parameters, NetVariant *result) {
  void * jmethodInfo = 0 ;
  void * jtarget = 0 ;
  void * jparameters  ;
  void * jresult = 0 ;
  
  if (!swig_callbackInvokeMethod) {
    NetTypeInfoCallbacks::InvokeMethod(methodInfo,target,parameters,result);
    return;
  } else {
    jmethodInfo = (void *) methodInfo; 
    jtarget = (void *) target; 
    jparameters = (void *)&parameters; 
    jresult = (void *) result; 
    swig_callbackInvokeMethod(jmethodInfo, jtarget, jparameters, jresult);
  }
}

void SwigDirector_NetTypeInfoCallbacks::ReleaseGCHandle(NetGCHandle *gcHandle) {
  void * jgcHandle = 0 ;
  
  if (!swig_callbackReleaseGCHandle) {
    NetTypeInfoCallbacks::ReleaseGCHandle(gcHandle);
    return;
  } else {
    jgcHandle = (void *) gcHandle; 
    swig_callbackReleaseGCHandle(jgcHandle);
  }
}

void SwigDirector_NetTypeInfoCallbacks::CopyGCHandle(NetGCHandle *gcHandle, NetGCHandle **gcHandleCopy) {
  void * jgcHandle = 0 ;
  void ** jgcHandleCopy = 0 ;
  
  if (!swig_callbackCopyGCHandle) {
    NetTypeInfoCallbacks::CopyGCHandle(gcHandle,gcHandleCopy);
    return;
  } else {
    jgcHandle = (void *) gcHandle; 
    jgcHandleCopy = (void **) gcHandleCopy;
    swig_callbackCopyGCHandle(jgcHandle, jgcHandleCopy);
  }
}

void SwigDirector_NetTypeInfoCallbacks::swig_connect_director(SWIG_Callback0_t callbackisValidType, SWIG_Callback1_t callbackBuildTypeInfo, SWIG_Callback2_t callbackCreateInstance, SWIG_Callback3_t callbackReadProperty, SWIG_Callback4_t callbackWriteProperty, SWIG_Callback5_t callbackInvokeMethod, SWIG_Callback6_t callbackReleaseGCHandle, SWIG_Callback7_t callbackCopyGCHandle) {
  swig_callbackisValidType = callbackisValidType;
  swig_callbackBuildTypeInfo = callbackBuildTypeInfo;
  swig_callbackCreateInstance = callbackCreateInstance;
  swig_callbackReadProperty = callbackReadProperty;
  swig_callbackWriteProperty = callbackWriteProperty;
  swig_callbackInvokeMethod = callbackInvokeMethod;
  swig_callbackReleaseGCHandle = callbackReleaseGCHandle;
  swig_callbackCopyGCHandle = callbackCopyGCHandle;
}

void SwigDirector_NetTypeInfoCallbacks::swig_init_callbacks() {
  swig_callbackisValidType = 0;
  swig_callbackBuildTypeInfo = 0;
  swig_callbackCreateInstance = 0;
  swig_callbackReadProperty = 0;
  swig_callbackWriteProperty = 0;
  swig_callbackInvokeMethod = 0;
  swig_callbackReleaseGCHandle = 0;
  swig_callbackCopyGCHandle = 0;
}

SwigDirector_GuiThreadContextTriggerCallback::SwigDirector_GuiThreadContextTriggerCallback() : GuiThreadContextTriggerCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_GuiThreadContextTriggerCallback::~SwigDirector_GuiThreadContextTriggerCallback() {
  
}


void SwigDirector_GuiThreadContextTriggerCallback::onGuiThreadContextTrigger() {
  if (!swig_callbackonGuiThreadContextTrigger) {
    GuiThreadContextTriggerCallback::onGuiThreadContextTrigger();
    return;
  } else {
    swig_callbackonGuiThreadContextTrigger();
  }
}

void SwigDirector_GuiThreadContextTriggerCallback::swig_connect_director(SWIG_Callback0_t callbackonGuiThreadContextTrigger) {
  swig_callbackonGuiThreadContextTrigger = callbackonGuiThreadContextTrigger;
}

void SwigDirector_GuiThreadContextTriggerCallback::swig_init_callbacks() {
  swig_callbackonGuiThreadContextTrigger = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetInstance(void * jarg1, void * jarg2) {
  void * jresult ;
  NetGCHandle *arg1 = (NetGCHandle *) 0 ;
  NetTypeInfo *arg2 = (NetTypeInfo *) 0 ;
  NetInstance *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (NetTypeInfo *)jarg2; 
  result = (NetInstance *)new NetInstance(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetInstance_GetGCHandle(void * jarg1) {
  void * jresult ;
  NetInstance *arg1 = (NetInstance *) 0 ;
  NetGCHandle *result = 0 ;
  
  arg1 = (NetInstance *)jarg1; 
  result = (NetGCHandle *)(arg1)->GetGCHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetInstance_GetTypeInfo(void * jarg1) {
  void * jresult ;
  NetInstance *arg1 = (NetInstance *) 0 ;
  NetTypeInfo *result = 0 ;
  
  arg1 = (NetInstance *)jarg1; 
  result = (NetTypeInfo *)(arg1)->GetTypeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetInstance_Clone(void * jarg1) {
  void * jresult ;
  NetInstance *arg1 = (NetInstance *) 0 ;
  NetInstance *result = 0 ;
  
  arg1 = (NetInstance *)jarg1; 
  result = (NetInstance *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetInstance(void * jarg1) {
  NetInstance *arg1 = (NetInstance *) 0 ;
  
  arg1 = (NetInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetVariant() {
  void * jresult ;
  NetVariant *result = 0 ;
  
  result = (NetVariant *)new NetVariant();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetVariant_GetVariantType(void * jarg1) {
  int jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  NetVariantTypeEnum result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (NetVariantTypeEnum)(arg1)->GetVariantType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetNetInstance(void * jarg1, void * jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  NetInstance *arg2 = (NetInstance *) 0 ;
  
  arg1 = (NetVariant *)jarg1; 
  arg2 = (NetInstance *)jarg2; 
  (arg1)->SetNetInstance(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetVariant_GetNetInstance(void * jarg1) {
  void * jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  NetInstance *result = 0 ;
  
  arg1 = (NetVariant *)jarg1; 
  result = (NetInstance *)(arg1)->GetNetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetBool(void * jarg1, unsigned int jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  bool arg2 ;
  
  arg1 = (NetVariant *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBool(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetVariant_GetBool(void * jarg1) {
  unsigned int jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  bool result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (bool)(arg1)->GetBool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetChar(void * jarg1, int jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  QChar arg2 ;
  
  arg1 = (NetVariant *)jarg1; 
  
  arg2 = jarg2;
  
  (arg1)->SetChar(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetVariant_GetChar(void * jarg1) {
  int jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  QChar result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (arg1)->GetChar();
  
  jresult = (&result)->unicode();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetInt(void * jarg1, int jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  int arg2 ;
  
  arg1 = (NetVariant *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetInt(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetVariant_GetInt(void * jarg1) {
  int jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  int result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (int)(arg1)->GetInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetUInt(void * jarg1, unsigned int jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (NetVariant *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetUInt(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetVariant_GetUInt(void * jarg1) {
  unsigned int jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  unsigned int result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (unsigned int)(arg1)->GetUInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetDouble(void * jarg1, double jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  double arg2 ;
  
  arg1 = (NetVariant *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetDouble(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_NetVariant_GetDouble(void * jarg1) {
  double jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  double result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (double)(arg1)->GetDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetString(void * jarg1, void * jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  QString *arg2 = (QString *) 0 ;
  QString temp2 ;
  
  arg1 = (NetVariant *)jarg1; 
  
  if(jarg2) {
#if defined(_WCHAR_MODE)
    temp2 = QString::fromWCharArray((TCHAR*)jarg2);
#elif defined(_UTF16_MODE)
    temp2 = QString::fromUtf16((TCHAR*)jarg2);
#else
    temp2 = QString::fromUtf8((TCHAR*)jarg2);
#endif
  }
  arg2 = &temp2;
  
  (arg1)->SetString(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetVariant_GetString(void * jarg1) {
  void * jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  QString result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (arg1)->GetString();
  
  if(!(&result)->isNull()) {
#if defined(_WCHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback((&result)->toStdWString().c_str());
#elif defined(_UTF16_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback((&result)->toStdU16String().c_str());
#elif defined(_CHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback((&result)->toUtf8().data());
#endif
  } else {
    jresult = NULL;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_SetDateTime(void * jarg1, char * jarg2) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  QDateTime *arg2 = 0 ;
  QDateTime temp2 ;
  
  arg1 = (NetVariant *)jarg1; 
  
  if(jarg2) {
    QString arg2_s = QString::fromLocal8Bit(jarg2);
    temp2 = QDateTime::fromString(arg2_s, Qt::ISODate);
  }
  arg2 = &temp2;
  
  (arg1)->SetDateTime(*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetVariant_GetDateTime(void * jarg1) {
  char * jresult ;
  NetVariant *arg1 = (NetVariant *) 0 ;
  QDateTime result;
  
  arg1 = (NetVariant *)jarg1; 
  result = (arg1)->GetDateTime();
  
  if((&result)->isNull()) {
    jresult = NULL;
  } else if(!(&result)->isValid()) {
    qDebug() << "Invalid date time";
    jresult = NULL;
  } else {
    QString result_string = (&result)->toString(Qt::ISODate);
    QByteArray result_ba = result_string.toLatin1();
    jresult = SWIG_csharp_string_callback(result_ba.data());
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariant_Clear(void * jarg1) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  
  arg1 = (NetVariant *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetVariant(void * jarg1) {
  NetVariant *arg1 = (NetVariant *) 0 ;
  
  arg1 = (NetVariant *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetTypeInfo(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  NetTypeInfo *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (NetTypeInfo *)new NetTypeInfo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetTypeInfo(void * jarg1) {
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetTypeInfo_GetPrefVariantType(void * jarg1) {
  int jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  NetVariantTypeEnum result;
  
  arg1 = (NetTypeInfo *)jarg1; 
  result = (NetVariantTypeEnum)(arg1)->GetPrefVariantType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfo_SetPrefVariantType(void * jarg1, int jarg2) {
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  NetVariantTypeEnum arg2 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = (NetVariantTypeEnum)jarg2; 
  (arg1)->SetPrefVariantType(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetTypeInfo_GetFullTypeName(void * jarg1) {
  char * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  std::string result;
  
  arg1 = (NetTypeInfo *)jarg1; 
  result = (arg1)->GetFullTypeName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfo_SetClassName(void * jarg1, char * jarg2) {
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetClassName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetTypeInfo_GetClassName(void * jarg1) {
  char * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  std::string result;
  
  arg1 = (NetTypeInfo *)jarg1; 
  result = (arg1)->GetClassName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfo_AddMethod(void * jarg1, void * jarg2) {
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  NetMethodInfo *arg2 = (NetMethodInfo *) 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = (NetMethodInfo *)jarg2; 
  (arg1)->AddMethod(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetTypeInfo_GetMethodCount(void * jarg1) {
  int jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  int result;
  
  arg1 = (NetTypeInfo *)jarg1; 
  result = (int)(arg1)->GetMethodCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTypeInfo_GetMethod(void * jarg1, int jarg2) {
  void * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  int arg2 ;
  NetMethodInfo *result = 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (NetMethodInfo *)(arg1)->GetMethod(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfo_AddProperty(void * jarg1, void * jarg2) {
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  NetPropertyInfo *arg2 = (NetPropertyInfo *) 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = (NetPropertyInfo *)jarg2; 
  (arg1)->AddProperty(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetTypeInfo_GetPropertyCount(void * jarg1) {
  int jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  int result;
  
  arg1 = (NetTypeInfo *)jarg1; 
  result = (int)(arg1)->GetPropertyCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTypeInfo_GetProperty(void * jarg1, int jarg2) {
  void * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  int arg2 ;
  NetPropertyInfo *result = 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (NetPropertyInfo *)(arg1)->GetProperty(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfo_ActivateSignal(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  NetGCHandle *arg2 = (NetGCHandle *) 0 ;
  std::string arg3 ;
  std::vector< NetVariant * > arg4 ;
  std::vector< NetVariant * > *argp4 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  argp4 = (std::vector< NetVariant * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< NetVariant * >", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ActivateSignal(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetTypeInfo_TryActivateSignal(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  NetGCHandle *arg2 = (NetGCHandle *) 0 ;
  std::string arg3 ;
  std::vector< NetVariant * > arg4 ;
  std::vector< NetVariant * > *argp4 ;
  bool result;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  argp4 = (std::vector< NetVariant * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< NetVariant * >", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->TryActivateSignal(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetMethodInfo(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  std::string arg2 ;
  NetTypeInfo *arg3 = (NetTypeInfo *) 0 ;
  NetMethodInfo *result = 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (NetTypeInfo *)jarg3; 
  result = (NetMethodInfo *)new NetMethodInfo(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetMethodInfo_GetMethodName(void * jarg1) {
  char * jresult ;
  NetMethodInfo *arg1 = (NetMethodInfo *) 0 ;
  std::string result;
  
  arg1 = (NetMethodInfo *)jarg1; 
  result = (arg1)->GetMethodName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetMethodInfo_GetReturnType(void * jarg1) {
  void * jresult ;
  NetMethodInfo *arg1 = (NetMethodInfo *) 0 ;
  NetTypeInfo *result = 0 ;
  
  arg1 = (NetMethodInfo *)jarg1; 
  result = (NetTypeInfo *)(arg1)->GetReturnType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetMethodInfo_AddParameter(void * jarg1, char * jarg2, void * jarg3) {
  NetMethodInfo *arg1 = (NetMethodInfo *) 0 ;
  std::string arg2 ;
  NetTypeInfo *arg3 = (NetTypeInfo *) 0 ;
  
  arg1 = (NetMethodInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (NetTypeInfo *)jarg3; 
  (arg1)->AddParameter(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetMethodInfo_GetParameterCount(void * jarg1) {
  int jresult ;
  NetMethodInfo *arg1 = (NetMethodInfo *) 0 ;
  int result;
  
  arg1 = (NetMethodInfo *)jarg1; 
  result = (int)(arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetMethodInfo_GetParameterInfo(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  NetMethodInfo *arg1 = (NetMethodInfo *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  NetTypeInfo **arg4 = (NetTypeInfo **) 0 ;
  
  arg1 = (NetMethodInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::string *)jarg3; 
  arg4 = (NetTypeInfo **)jarg4; 
  (arg1)->GetParameterInfo(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetMethodInfo(void * jarg1) {
  NetMethodInfo *arg1 = (NetMethodInfo *) 0 ;
  
  arg1 = (NetMethodInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetPropertyInfo(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6) {
  void * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  std::string arg2 ;
  NetTypeInfo *arg3 = (NetTypeInfo *) 0 ;
  bool arg4 ;
  bool arg5 ;
  std::string arg6 ;
  NetPropertyInfo *result = 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (NetTypeInfo *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg6)->assign(jarg6); 
  result = (NetPropertyInfo *)new NetPropertyInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetPropertyInfo_GetParentType(void * jarg1) {
  void * jresult ;
  NetPropertyInfo *arg1 = (NetPropertyInfo *) 0 ;
  NetTypeInfo *result = 0 ;
  
  arg1 = (NetPropertyInfo *)jarg1; 
  result = (NetTypeInfo *)(arg1)->GetParentType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetPropertyInfo_GetPropertyName(void * jarg1) {
  char * jresult ;
  NetPropertyInfo *arg1 = (NetPropertyInfo *) 0 ;
  std::string result;
  
  arg1 = (NetPropertyInfo *)jarg1; 
  result = (arg1)->GetPropertyName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetPropertyInfo_GetReturnType(void * jarg1) {
  void * jresult ;
  NetPropertyInfo *arg1 = (NetPropertyInfo *) 0 ;
  NetTypeInfo *result = 0 ;
  
  arg1 = (NetPropertyInfo *)jarg1; 
  result = (NetTypeInfo *)(arg1)->GetReturnType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetPropertyInfo_CanRead(void * jarg1) {
  unsigned int jresult ;
  NetPropertyInfo *arg1 = (NetPropertyInfo *) 0 ;
  bool result;
  
  arg1 = (NetPropertyInfo *)jarg1; 
  result = (bool)(arg1)->CanRead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetPropertyInfo_CanWrite(void * jarg1) {
  unsigned int jresult ;
  NetPropertyInfo *arg1 = (NetPropertyInfo *) 0 ;
  bool result;
  
  arg1 = (NetPropertyInfo *)jarg1; 
  result = (bool)(arg1)->CanWrite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetPropertyInfo_GetNotifySignalName(void * jarg1) {
  char * jresult ;
  NetPropertyInfo *arg1 = (NetPropertyInfo *) 0 ;
  std::string result;
  
  arg1 = (NetPropertyInfo *)jarg1; 
  result = (arg1)->GetNotifySignalName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetPropertyInfo(void * jarg1) {
  NetPropertyInfo *arg1 = (NetPropertyInfo *) 0 ;
  
  arg1 = (NetPropertyInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_Clear(void * jarg1) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_Add(void * jarg1, void * jarg2) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  NetVariant **arg2 = 0 ;
  NetVariant *temp2 = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  temp2 = (NetVariant *)jarg2;
  arg2 = (NetVariant **)&temp2; 
  (arg1)->push_back((NetVariant *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NetVariantVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  std::vector< NetVariant * >::size_type result;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  result = ((std::vector< NetVariant * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NetVariantVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  std::vector< NetVariant * >::size_type result;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  result = ((std::vector< NetVariant * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  std::vector< NetVariant * >::size_type arg2 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (std::vector< NetVariant * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetVariantVector__SWIG_0() {
  void * jresult ;
  std::vector< NetVariant * > *result = 0 ;
  
  result = (std::vector< NetVariant * > *)new std::vector< NetVariant * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetVariantVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< NetVariant * > *arg1 = 0 ;
  std::vector< NetVariant * > *result = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NetVariant * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< NetVariant * > *)new std::vector< NetVariant * >((std::vector< NetVariant * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetVariantVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< NetVariant * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< NetVariant * > *)new_std_vector_Sl_NetVariant_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetVariantVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  NetVariant *result = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (NetVariant *)std_vector_Sl_NetVariant_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetVariantVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  NetVariant **result = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (NetVariant **) &std_vector_Sl_NetVariant_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  NetVariant **arg3 = 0 ;
  NetVariant *temp3 = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (NetVariant *)jarg3;
  arg3 = (NetVariant **)&temp3; 
  try {
    std_vector_Sl_NetVariant_Sm__Sg__setitem(arg1,arg2,(NetVariant *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  std::vector< NetVariant * > *arg2 = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (std::vector< NetVariant * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NetVariant * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_NetVariant_Sm__Sg__AddRange(arg1,(std::vector< NetVariant * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetVariantVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< NetVariant * > *result = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< NetVariant * > *)std_vector_Sl_NetVariant_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  NetVariant **arg3 = 0 ;
  NetVariant *temp3 = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (NetVariant *)jarg3;
  arg3 = (NetVariant **)&temp3; 
  try {
    std_vector_Sl_NetVariant_Sm__Sg__Insert(arg1,arg2,(NetVariant *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  std::vector< NetVariant * > *arg3 = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NetVariant * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NetVariant * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NetVariant_Sm__Sg__InsertRange(arg1,arg2,(std::vector< NetVariant * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_NetVariant_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NetVariant_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetVariantVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  NetVariant **arg1 = 0 ;
  int arg2 ;
  NetVariant *temp1 = 0 ;
  std::vector< NetVariant * > *result = 0 ;
  
  temp1 = (NetVariant *)jarg1;
  arg1 = (NetVariant **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< NetVariant * > *)std_vector_Sl_NetVariant_Sm__Sg__Repeat((NetVariant *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  std_vector_Sl_NetVariant_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NetVariant_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetVariantVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  int arg2 ;
  std::vector< NetVariant * > *arg3 = 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NetVariant * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NetVariant * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NetVariant_Sm__Sg__SetRange(arg1,arg2,(std::vector< NetVariant * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetVariantVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  NetVariant **arg2 = 0 ;
  NetVariant *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  temp2 = (NetVariant *)jarg2;
  arg2 = (NetVariant **)&temp2; 
  result = (bool)std_vector_Sl_NetVariant_Sm__Sg__Contains(arg1,(NetVariant *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetVariantVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  NetVariant **arg2 = 0 ;
  NetVariant *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  temp2 = (NetVariant *)jarg2;
  arg2 = (NetVariant **)&temp2; 
  result = (int)std_vector_Sl_NetVariant_Sm__Sg__IndexOf(arg1,(NetVariant *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetVariantVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  NetVariant **arg2 = 0 ;
  NetVariant *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  temp2 = (NetVariant *)jarg2;
  arg2 = (NetVariant **)&temp2; 
  result = (int)std_vector_Sl_NetVariant_Sm__Sg__LastIndexOf(arg1,(NetVariant *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetVariantVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  NetVariant **arg2 = 0 ;
  NetVariant *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  temp2 = (NetVariant *)jarg2;
  arg2 = (NetVariant **)&temp2; 
  result = (bool)std_vector_Sl_NetVariant_Sm__Sg__Remove(arg1,(NetVariant *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetVariantVector(void * jarg1) {
  std::vector< NetVariant * > *arg1 = (std::vector< NetVariant * > *) 0 ;
  
  arg1 = (std::vector< NetVariant * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetTypeInfoCallbacks(void * jarg1) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetTypeInfoCallbacks_isValidType(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->isValidType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetTypeInfoCallbacks_isValidTypeSwigExplicitNetTypeInfoCallbacks(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->NetTypeInfoCallbacks::isValidType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_BuildTypeInfo(void * jarg1, void * jarg2) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetTypeInfo *arg2 = (NetTypeInfo *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetTypeInfo *)jarg2; 
  (arg1)->BuildTypeInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_BuildTypeInfoSwigExplicitNetTypeInfoCallbacks(void * jarg1, void * jarg2) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetTypeInfo *arg2 = (NetTypeInfo *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetTypeInfo *)jarg2; 
  (arg1)->NetTypeInfoCallbacks::BuildTypeInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_CreateInstance(void * jarg1, void * jarg2, void ** jarg3) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetTypeInfo *arg2 = (NetTypeInfo *) 0 ;
  NetGCHandle **arg3 = (NetGCHandle **) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetTypeInfo *)jarg2; 
  arg3 = jarg3; 
  (arg1)->CreateInstance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_CreateInstanceSwigExplicitNetTypeInfoCallbacks(void * jarg1, void * jarg2, void ** jarg3) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetTypeInfo *arg2 = (NetTypeInfo *) 0 ;
  NetGCHandle **arg3 = (NetGCHandle **) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetTypeInfo *)jarg2; 
  arg3 = jarg3; 
  (arg1)->NetTypeInfoCallbacks::CreateInstance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_ReadProperty(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetPropertyInfo *arg2 = (NetPropertyInfo *) 0 ;
  NetInstance *arg3 = (NetInstance *) 0 ;
  NetVariant *arg4 = (NetVariant *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetPropertyInfo *)jarg2; 
  arg3 = (NetInstance *)jarg3; 
  arg4 = (NetVariant *)jarg4; 
  (arg1)->ReadProperty(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_ReadPropertySwigExplicitNetTypeInfoCallbacks(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetPropertyInfo *arg2 = (NetPropertyInfo *) 0 ;
  NetInstance *arg3 = (NetInstance *) 0 ;
  NetVariant *arg4 = (NetVariant *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetPropertyInfo *)jarg2; 
  arg3 = (NetInstance *)jarg3; 
  arg4 = (NetVariant *)jarg4; 
  (arg1)->NetTypeInfoCallbacks::ReadProperty(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_WriteProperty(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetPropertyInfo *arg2 = (NetPropertyInfo *) 0 ;
  NetInstance *arg3 = (NetInstance *) 0 ;
  NetVariant *arg4 = (NetVariant *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetPropertyInfo *)jarg2; 
  arg3 = (NetInstance *)jarg3; 
  arg4 = (NetVariant *)jarg4; 
  (arg1)->WriteProperty(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_WritePropertySwigExplicitNetTypeInfoCallbacks(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetPropertyInfo *arg2 = (NetPropertyInfo *) 0 ;
  NetInstance *arg3 = (NetInstance *) 0 ;
  NetVariant *arg4 = (NetVariant *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetPropertyInfo *)jarg2; 
  arg3 = (NetInstance *)jarg3; 
  arg4 = (NetVariant *)jarg4; 
  (arg1)->NetTypeInfoCallbacks::WriteProperty(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_InvokeMethod(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetMethodInfo *arg2 = (NetMethodInfo *) 0 ;
  NetInstance *arg3 = (NetInstance *) 0 ;
  std::vector< NetVariant * > arg4 ;
  NetVariant *arg5 = (NetVariant *) 0 ;
  std::vector< NetVariant * > *argp4 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetMethodInfo *)jarg2; 
  arg3 = (NetInstance *)jarg3; 
  argp4 = (std::vector< NetVariant * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< NetVariant * >", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (NetVariant *)jarg5; 
  (arg1)->InvokeMethod(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_InvokeMethodSwigExplicitNetTypeInfoCallbacks(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetMethodInfo *arg2 = (NetMethodInfo *) 0 ;
  NetInstance *arg3 = (NetInstance *) 0 ;
  std::vector< NetVariant * > arg4 ;
  NetVariant *arg5 = (NetVariant *) 0 ;
  std::vector< NetVariant * > *argp4 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = (NetMethodInfo *)jarg2; 
  arg3 = (NetInstance *)jarg3; 
  argp4 = (std::vector< NetVariant * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< NetVariant * >", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (NetVariant *)jarg5; 
  (arg1)->NetTypeInfoCallbacks::InvokeMethod(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_ReleaseGCHandle(void * jarg1, void * jarg2) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetGCHandle *arg2 = (NetGCHandle *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ReleaseGCHandle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_ReleaseGCHandleSwigExplicitNetTypeInfoCallbacks(void * jarg1, void * jarg2) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetGCHandle *arg2 = (NetGCHandle *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = jarg2; 
  (arg1)->NetTypeInfoCallbacks::ReleaseGCHandle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_CopyGCHandle(void * jarg1, void * jarg2, void ** jarg3) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetGCHandle *arg2 = (NetGCHandle *) 0 ;
  NetGCHandle **arg3 = (NetGCHandle **) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->CopyGCHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_CopyGCHandleSwigExplicitNetTypeInfoCallbacks(void * jarg1, void * jarg2, void ** jarg3) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  NetGCHandle *arg2 = (NetGCHandle *) 0 ;
  NetGCHandle **arg3 = (NetGCHandle **) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->NetTypeInfoCallbacks::CopyGCHandle(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetTypeInfoCallbacks() {
  void * jresult ;
  NetTypeInfoCallbacks *result = 0 ;
  
  result = (NetTypeInfoCallbacks *)new SwigDirector_NetTypeInfoCallbacks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoCallbacks_director_connect(void *objarg, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback0_t callback0, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback1_t callback1, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback2_t callback2, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback3_t callback3, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback4_t callback4, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback5_t callback5, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback6_t callback6, SwigDirector_NetTypeInfoCallbacks::SWIG_Callback7_t callback7) {
  NetTypeInfoCallbacks *obj = (NetTypeInfoCallbacks *)objarg;
  SwigDirector_NetTypeInfoCallbacks *director = dynamic_cast<SwigDirector_NetTypeInfoCallbacks *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTypeInfoManager_setCallbacks(void * jarg1) {
  NetTypeInfoCallbacks *arg1 = (NetTypeInfoCallbacks *) 0 ;
  
  arg1 = (NetTypeInfoCallbacks *)jarg1; 
  NetTypeInfoManager::setCallbacks(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTypeInfoManager_GetTypeInfo(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  NetTypeInfo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (NetTypeInfo *)NetTypeInfoManager::GetTypeInfo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTypeInfoManager_CreateInstance(void * jarg1) {
  void * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  NetInstance *result = 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  result = (NetInstance *)NetTypeInfoManager::CreateInstance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTypeInfoManager_WrapCreatedInstance(void * jarg1, void * jarg2) {
  void * jresult ;
  NetGCHandle *arg1 = (NetGCHandle *) 0 ;
  NetTypeInfo *arg2 = (NetTypeInfo *) 0 ;
  NetInstance *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (NetTypeInfo *)jarg2; 
  result = (NetInstance *)NetTypeInfoManager::WrapCreatedInstance(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTypeInfoManager_NewMethodInfo(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  NetTypeInfo *arg3 = (NetTypeInfo *) 0 ;
  NetMethodInfo *result = 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (NetTypeInfo *)jarg3; 
  result = (NetMethodInfo *)NetTypeInfoManager::NewMethodInfo(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTypeInfoManager_NewPropertyInfo(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6) {
  void * jresult ;
  NetTypeInfo *arg1 = (NetTypeInfo *) 0 ;
  std::string arg2 ;
  NetTypeInfo *arg3 = (NetTypeInfo *) 0 ;
  bool arg4 ;
  bool arg5 ;
  std::string arg6 ;
  NetPropertyInfo *result = 0 ;
  
  arg1 = (NetTypeInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (NetTypeInfo *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg6)->assign(jarg6); 
  result = (NetPropertyInfo *)NetTypeInfoManager::NewPropertyInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetTypeInfoManager() {
  void * jresult ;
  NetTypeInfoManager *result = 0 ;
  
  result = (NetTypeInfoManager *)new NetTypeInfoManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetTypeInfoManager(void * jarg1) {
  NetTypeInfoManager *arg1 = (NetTypeInfoManager *) 0 ;
  
  arg1 = (NetTypeInfoManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QCoreApplication_setAttribute__SWIG_0(int jarg1, unsigned int jarg2) {
  Qt::ApplicationAttribute arg1 ;
  bool arg2 ;
  
  arg1 = (Qt::ApplicationAttribute)jarg1; 
  arg2 = jarg2 ? true : false; 
  QCoreApplication::setAttribute(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QCoreApplication_setAttribute__SWIG_1(int jarg1) {
  Qt::ApplicationAttribute arg1 ;
  
  arg1 = (Qt::ApplicationAttribute)jarg1; 
  QCoreApplication::setAttribute(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_QCoreApplication_exec(void * jarg1) {
  int jresult ;
  QCoreApplication *arg1 = (QCoreApplication *) 0 ;
  int result;
  
  arg1 = (QCoreApplication *)jarg1; 
  result = (int)(arg1)->exec();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QCoreApplication(void * jarg1) {
  QCoreApplication *arg1 = (QCoreApplication *) 0 ;
  
  arg1 = (QCoreApplication *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GuiThreadContextTriggerCallback(void * jarg1) {
  GuiThreadContextTriggerCallback *arg1 = (GuiThreadContextTriggerCallback *) 0 ;
  
  arg1 = (GuiThreadContextTriggerCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GuiThreadContextTriggerCallback_onGuiThreadContextTrigger(void * jarg1) {
  GuiThreadContextTriggerCallback *arg1 = (GuiThreadContextTriggerCallback *) 0 ;
  
  arg1 = (GuiThreadContextTriggerCallback *)jarg1; 
  (arg1)->onGuiThreadContextTrigger();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GuiThreadContextTriggerCallback_onGuiThreadContextTriggerSwigExplicitGuiThreadContextTriggerCallback(void * jarg1) {
  GuiThreadContextTriggerCallback *arg1 = (GuiThreadContextTriggerCallback *) 0 ;
  
  arg1 = (GuiThreadContextTriggerCallback *)jarg1; 
  (arg1)->GuiThreadContextTriggerCallback::onGuiThreadContextTrigger();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GuiThreadContextTriggerCallback() {
  void * jresult ;
  GuiThreadContextTriggerCallback *result = 0 ;
  
  result = (GuiThreadContextTriggerCallback *)new SwigDirector_GuiThreadContextTriggerCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GuiThreadContextTriggerCallback_director_connect(void *objarg, SwigDirector_GuiThreadContextTriggerCallback::SWIG_Callback0_t callback0) {
  GuiThreadContextTriggerCallback *obj = (GuiThreadContextTriggerCallback *)objarg;
  SwigDirector_GuiThreadContextTriggerCallback *director = dynamic_cast<SwigDirector_GuiThreadContextTriggerCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QGuiApplication(void * jarg1) {
  void * jresult ;
  std::vector< std::string > arg1 ;
  std::vector< std::string > *argp1 ;
  QGuiApplication *result = 0 ;
  
  argp1 = (std::vector< std::string > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::string >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (QGuiApplication *)new_QGuiApplication(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QGuiApplication_setGuiThreadContextTriggerCallback(void * jarg1, void * jarg2) {
  QGuiApplication *arg1 = (QGuiApplication *) 0 ;
  GuiThreadContextTriggerCallback *arg2 = (GuiThreadContextTriggerCallback *) 0 ;
  
  arg1 = (QGuiApplication *)jarg1; 
  arg2 = (GuiThreadContextTriggerCallback *)jarg2; 
  QGuiApplication_setGuiThreadContextTriggerCallback(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QGuiApplication_requestGuiThreadContextTrigger(void * jarg1) {
  QGuiApplication *arg1 = (QGuiApplication *) 0 ;
  
  arg1 = (QGuiApplication *)jarg1; 
  QGuiApplication_requestGuiThreadContextTrigger(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_QGuiApplication_exec(void * jarg1) {
  int jresult ;
  QGuiApplication *arg1 = (QGuiApplication *) 0 ;
  int result;
  
  arg1 = (QGuiApplication *)jarg1; 
  result = (int)(arg1)->exec();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QGuiApplication(void * jarg1) {
  QGuiApplication *arg1 = (QGuiApplication *) 0 ;
  
  arg1 = (QGuiApplication *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QQmlApplicationEngine_loadFile(void * jarg1, char * jarg2) {
  QQmlApplicationEngine *arg1 = (QQmlApplicationEngine *) 0 ;
  std::string arg2 ;
  
  arg1 = (QQmlApplicationEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  QQmlApplicationEngine_loadFile(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QQmlApplicationEngine() {
  void * jresult ;
  QQmlApplicationEngine *result = 0 ;
  
  result = (QQmlApplicationEngine *)new QQmlApplicationEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QQmlApplicationEngine(void * jarg1) {
  QQmlApplicationEngine *arg1 = (QQmlApplicationEngine *) 0 ;
  
  arg1 = (QQmlApplicationEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_registerNetType(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  int jresult ;
  QString *arg1 = 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  QString *arg5 = 0 ;
  QString temp1 ;
  QString temp2 ;
  QString temp5 ;
  int result;
  
  
  if(jarg1) {
#if defined(_WCHAR_MODE)
    temp1 = QString::fromWCharArray((TCHAR*)jarg1);
#elif defined(_UTF16_MODE)
    temp1 = QString::fromUtf16((TCHAR*)jarg1);
#else
    temp1 = QString::fromUtf8((TCHAR*)jarg1);
#endif
  }
  arg1 = &temp1;
  
  
  if(jarg2) {
#if defined(_WCHAR_MODE)
    temp2 = QString::fromWCharArray((TCHAR*)jarg2);
#elif defined(_UTF16_MODE)
    temp2 = QString::fromUtf16((TCHAR*)jarg2);
#else
    temp2 = QString::fromUtf8((TCHAR*)jarg2);
#endif
  }
  arg2 = &temp2;
  
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  
  if(jarg5) {
#if defined(_WCHAR_MODE)
    temp5 = QString::fromWCharArray((TCHAR*)jarg5);
#elif defined(_UTF16_MODE)
    temp5 = QString::fromUtf16((TCHAR*)jarg5);
#else
    temp5 = QString::fromUtf8((TCHAR*)jarg5);
#endif
  }
  arg5 = &temp5;
  
  result = (int)registerNetType(*arg1,*arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_activateSignal(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  NetGCHandle *arg1 = (NetGCHandle *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< NetVariant * > arg4 ;
  std::vector< NetVariant * > *argp4 ;
  
  arg1 = jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  argp4 = (std::vector< NetVariant * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< NetVariant * >", 0);
    return ;
  }
  arg4 = *argp4; 
  activateSignal(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tryActivateSignal(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  NetGCHandle *arg1 = (NetGCHandle *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< NetVariant * > arg4 ;
  std::vector< NetVariant * > *argp4 ;
  bool result;
  
  arg1 = jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  argp4 = (std::vector< NetVariant * > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< NetVariant * >", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)tryActivateSignal(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTestHelper_RunQml(void * jarg1, void * jarg2) {
  QQmlApplicationEngine *arg1 = (QQmlApplicationEngine *) 0 ;
  QString *arg2 = 0 ;
  QString temp2 ;
  
  arg1 = (QQmlApplicationEngine *)jarg1; 
  
  if(jarg2) {
#if defined(_WCHAR_MODE)
    temp2 = QString::fromWCharArray((TCHAR*)jarg2);
#elif defined(_UTF16_MODE)
    temp2 = QString::fromUtf16((TCHAR*)jarg2);
#else
    temp2 = QString::fromUtf8((TCHAR*)jarg2);
#endif
  }
  arg2 = &temp2;
  
  NetTestHelper::RunQml(arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTestHelper_RunQmlMethod(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  QQmlApplicationEngine *arg1 = (QQmlApplicationEngine *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  NetVariant *arg4 = (NetVariant *) 0 ;
  NetVariant *arg5 = (NetVariant *) 0 ;
  QString temp2 ;
  QString temp3 ;
  
  arg1 = (QQmlApplicationEngine *)jarg1; 
  
  if(jarg2) {
#if defined(_WCHAR_MODE)
    temp2 = QString::fromWCharArray((TCHAR*)jarg2);
#elif defined(_UTF16_MODE)
    temp2 = QString::fromUtf16((TCHAR*)jarg2);
#else
    temp2 = QString::fromUtf8((TCHAR*)jarg2);
#endif
  }
  arg2 = &temp2;
  
  
  if(jarg3) {
#if defined(_WCHAR_MODE)
    temp3 = QString::fromWCharArray((TCHAR*)jarg3);
#elif defined(_UTF16_MODE)
    temp3 = QString::fromUtf16((TCHAR*)jarg3);
#else
    temp3 = QString::fromUtf8((TCHAR*)jarg3);
#endif
  }
  arg3 = &temp3;
  
  arg4 = (NetVariant *)jarg4; 
  arg5 = (NetVariant *)jarg5; 
  NetTestHelper::RunQmlMethod(arg1,*arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetTestHelper() {
  void * jresult ;
  NetTestHelper *result = 0 ;
  
  result = (NetTestHelper *)new NetTestHelper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetTestHelper(void * jarg1) {
  NetTestHelper *arg1 = (NetTestHelper *) 0 ;
  
  arg1 = (NetTestHelper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetTestStringInterop() {
  void * jresult ;
  NetTestStringInterop *result = 0 ;
  
  result = (NetTestStringInterop *)new NetTestStringInterop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTestStringInterop_SetStringValue(void * jarg1, void * jarg2) {
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  QString arg2 ;
  QString temp2 ;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  
  if(jarg2) {
#if defined(_WCHAR_MODE)
    arg2 = QString::fromWCharArray((TCHAR*)jarg2);
#elif defined(_UTF16_MODE)
    arg2 = QString::fromUtf16((TCHAR*)jarg2);
#else
    arg2 = QString::fromUtf8((TCHAR*)jarg2);
#endif
  }
  
  (arg1)->SetStringValue(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTestStringInterop_GetStringValue(void * jarg1) {
  void * jresult ;
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  QString result;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  result = (arg1)->GetStringValue();
  
  if(!(&result)->isNull()) {
#if defined(_WCHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback((&result)->toStdWString().c_str());
#elif defined(_UTF16_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback((&result)->toStdU16String().c_str());
#elif defined(_CHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback((&result)->toUtf8().data());
#endif
  } else {
    jresult = NULL;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTestStringInterop_SetStringReference(void * jarg1, void * jarg2) {
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  QString *arg2 = 0 ;
  QString temp2 ;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  
  if(jarg2) {
#if defined(_WCHAR_MODE)
    temp2 = QString::fromWCharArray((TCHAR*)jarg2);
#elif defined(_UTF16_MODE)
    temp2 = QString::fromUtf16((TCHAR*)jarg2);
#else
    temp2 = QString::fromUtf8((TCHAR*)jarg2);
#endif
  }
  arg2 = &temp2;
  
  (arg1)->SetStringReference(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTestStringInterop_GetStringReference(void * jarg1) {
  void * jresult ;
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  QString *result = 0 ;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  result = (QString *) &(arg1)->GetStringReference();
  
  if(!result->isNull()) {
#if defined(_WCHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback(result->toStdWString().c_str());
#elif defined(_UTF16_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback(result->toStdU16String().c_str());
#elif defined(_CHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback(result->toUtf8().data());
#endif
  } else {
    jresult = NULL;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTestStringInterop_SetStringPointer(void * jarg1, void * jarg2) {
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  QString *arg2 = (QString *) 0 ;
  QString temp2 ;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  
  if(jarg2) {
#if defined(_WCHAR_MODE)
    temp2 = QString::fromWCharArray((TCHAR*)jarg2);
#elif defined(_UTF16_MODE)
    temp2 = QString::fromUtf16((TCHAR*)jarg2);
#else
    temp2 = QString::fromUtf8((TCHAR*)jarg2);
#endif
  }
  arg2 = &temp2;
  
  (arg1)->SetStringPointer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetTestStringInterop_GetStringPointer(void * jarg1) {
  void * jresult ;
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  QString *result = 0 ;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  result = (QString *)(arg1)->GetStringPointer();
  
  if(!result->isNull()) {
#if defined(_WCHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback(result->toStdWString().c_str());
#elif defined(_UTF16_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback(result->toStdU16String().c_str());
#elif defined(_CHAR_MODE)
    jresult = (TCHAR*)SWIG_csharp_qstring_callback(result->toUtf8().data());
#endif
  } else {
    jresult = NULL;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetTestStringInterop_PrintString(void * jarg1) {
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  (arg1)->PrintString();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetTestStringInterop(void * jarg1) {
  NetTestStringInterop *arg1 = (NetTestStringInterop *) 0 ;
  
  arg1 = (NetTestStringInterop *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

